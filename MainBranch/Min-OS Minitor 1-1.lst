0001   0000             ;MIN-OS-Serial -  VER 1.0A
0002   0000             ;
0003   0000             ;
0004   0000             ;Ram located at 8000h
0005   0000             ;Stack Pointer at 88FFh
0006   0000             ;Change as needed
0007   0000             ;If this code is used give credit to hackling92.  Nothing special just use my name. Thank You
0008   0000             
0009   0000             
0010   0000             
0011   0000             
0012   0000             	; start the program at memory region 1 for programing simplicity
0013   0000             	.ORG 0001h
0014   0001             
0015   0001             lf	EQU 0Ah		; declair Line Feed
0016   0001             
0017   0001 31 FF 88    	LD SP,88FFh	; set the stack pointer
0018   0004             
0019   0004             
0020   0004             inituart:
0021   0004 3E 80       	LD A,10000000b  ; set div latch enable 1
0022   0006 D3 03       	OUT (03h),A	; write lcr
0023   0008 3E 0C       	LD A,0Ch		; set Divisor
0024   000A D3 00       	OUT (00h),A	; dll 0x07 (#7)
0025   000C 3E 00       	LD A,00h
0026   000E D3 01       	OUT (01h),A	; dlm 0x00
0027   0010 3E 03       	LD A,00000011b	; set dle to 0, break to 0, no parity, 1 stop bit, 8 bytes
0028   0012 D3 03       	OUT (03h),A	; write new configured lcr
0029   0014 C3 65 00    	JP startloop	; program start
0030   0017             		
0031   0017             
0032   0017             ;-----------------------
0033   0017             putc:			;Put Charactor Loop
0034   0017 CD 2D 00    	CALL tx_ready
0035   001A D3 00       	OUT (00h), A
0036   001C C9          	RET
0037   001D             
0038   001D             puts:			;Put String Loop
0039   001D F5          	PUSH AF
0040   001E E5          	PUSH HL
0041   001F             puts_loop:
0042   001F 7E          	LD A, (HL)
0043   0020 FE 00       	CP 0
0044   0022 28 06       	JR Z, puts_end
0045   0024 CD 17 00    	CALL putc
0046   0027 23          	INC HL
0047   0028 18 F5       	JR puts_loop
0048   002A             puts_end:
0049   002A E1          	POP HL
0050   002B F1          	POP AF
0051   002C C9          	RET
0052   002D             ;-----------------------
0053   002D             
0054   002D             
0055   002D             tx_ready:		;Check For Charactor In UART
0056   002D F5          	PUSH AF
0057   002E             tx_ready_loop:
0058   002E DB 05       	IN A, (05h)
0059   0030 CB 6F       	BIT 5, A
0060   0032 28 FA       	JR Z, tx_ready_loop
0061   0034 F1          	POP AF
0062   0035 C9          	RET
0063   0036             
0064   0036             
0065   0036             ;-----------------------
0066   0036             
0067   0036             uin:			;Get Charactor
0068   0036 DB 05       	IN A, (05h)
0069   0038 CB 47       	BIT 0,A
0070   003A CA 36 00    	JP Z,uin
0071   003D DB 00       	IN A,(00h)
0072   003F C9          	RET
0073   0040             
0074   0040             
0075   0040             ;-----------------------
0076   0040             
0077   0040             make_hex:		; convert ascii from uart to hex
0078   0040 06 00       	LD B,0
0079   0042 CD 4A 00    	CALL h1
0080   0045 07          	RLCA
0081   0046 07          	RLCA
0082   0047 07          	RLCA
0083   0048 07          	RLCA
0084   0049 47          	LD B,A
0085   004A             h1:
0086   004A CD 36 00    	CALL uin
0087   004D 4F          	LD C,A
0088   004E CD 17 00    	CALL putc
0089   0051 E6 70       	AND 070h
0090   0053 FE 40       	CP 040h
0091   0055 DA 60 00    	JP C,h2
0092   0058 79          	LD A,C
0093   0059 E6 0F       	AND 00Fh
0094   005B C6 09       	ADD A,9
0095   005D C3 63 00    	JP h3
0096   0060             h2:
0097   0060 79          	LD A,C
0098   0061 E6 0F       	AND 00Fh
0099   0063             h3:
0100   0063 B0          	OR B
0101   0064 C9          	RET
0102   0065             
0103   0065             ;-----------------------	
0104   0065             	
0105   0065             startloop:		; starting point for program	
0106   0065 21 E5 00    	LD HL, starttext	;Load Start Message Location
0107   0068 CD 1D 00    	CALL puts	; print start message
0108   006B             
0109   006B             ;----------------------------------------------
0110   006B             command_loop:
0111   006B 21 EC 00    	LD HL,command_msg
0112   006E CD 1D 00    	CALL puts
0113   0071 CD 36 00    	CALL uin
0114   0074 CD 17 00    	CALL putc
0115   0077 FE 4A       	CP 4Ah
0116   0079 CA 86 00    	JP Z,j_loop
0117   007C FE 50       	CP 50h
0118   007E CA 94 00    	JP Z,p_loop
0119   0081 FE 52       	CP 52h
0120   0083 CA A7 00    	JP Z,r_loop
0121   0086             
0122   0086             
0123   0086             j_loop:
0124   0086 CD 36 00    	CALL uin
0125   0089 CD 17 00    	CALL putc
0126   008C FE 4D       	CP 4Dh		;JM COMMAND
0127   008E CA 00 81    	JP Z,8100h
0128   0091 C3 6B 00    	JP command_loop
0129   0094             
0130   0094             p_loop:
0131   0094 CD 36 00    	CALL uin
0132   0097 CD 17 00    	CALL putc
0133   009A FE 45       	CP 45h		;PE COMMAND
0134   009C CA F6 00    	JP Z,pe_com
0135   009F FE 4F       	CP 4Fh		;PO COMMAND
0136   00A1 CA 10 01    	JP Z,po_com
0137   00A4 C3 6B 00    	JP command_loop
0138   00A7             
0139   00A7             r_loop:
0140   00A7 CD 36 00    	CALL uin
0141   00AA CD 17 00    	CALL putc
0142   00AD FE 53       	CP 53h		;RS COMMAND
0143   00AF CA 00 00    	JP Z,0000h
0144   00B2 FE 50       	CP 50h		;RP COMMAND "REMOTE PROGRAM"
0145   00B4 CA 1C 01    	JP Z,serial_program
0146   00B7 C3 6B 00    	JP command_loop
0147   00BA             
0148   00BA             
0149   00BA             start_add:		; PE/PO Start Address
0150   00BA 53 74 61 72 	DEFB "Start Add: ",0
0150   00BE 74 20 41 64 
0150   00C2 64 3A 20 00 
0151   00C6             end_add:		; PE End Address
0152   00C6 45 6E 64 20 	DEFB "End Add: ",0
0152   00CA 41 64 64 3A 
0152   00CE 20 00       
0153   00D0             new_dat:		; New Data For PO Command
0154   00D0 4E 65 77 20 	DEFB "New Data: ",0
0154   00D4 44 61 74 61 
0154   00D8 3A 20 00    
0155   00DB             address:		; Address Text
0156   00DB 41 64 64 72 	DEFB "Address: ",0
0156   00DF 65 73 73 3A 
0156   00E3 20 00       
0157   00E5             starttext:		; start message
0158   00E5 52 65 61 64 	DEFB "Ready", lf,0
0158   00E9 79 0A 00    
0159   00EC             command_msg:		; Enter Command message
0160   00EC 43 6F 6D 6D 	DEFB "Command: ",0
0160   00F0 61 6E 64 3A 
0160   00F4 20 00       
0161   00F6             	
0162   00F6             	
0163   00F6             
0164   00F6             
0165   00F6             ;---------------------------------------------------
0166   00F6             pe_com:
0167   00F6 21 DB 00    	LD HL, address
0168   00F9 CD 1D 00    	CALL puts
0169   00FC CD 40 00    	CALL make_hex
0170   00FF 57          	LD D,A
0171   0100 CD 40 00    	CALL make_hex
0172   0103 5F          	LD E,A
0173   0104 3E 0A       	LD A, lf
0174   0106 CD 17 00    	CALL putc
0175   0109             
0176   0109 1A          	LD A,(DE)
0177   010A CD 17 00    	CALL putc
0178   010D C3 6B 00    	JP command_loop
0179   0110             
0180   0110             
0181   0110             po_com:
0182   0110 21 DB 00    	LD HL, address
0183   0113 CD 1D 00    	CALL puts
0184   0116             	;add func here from above
0185   0116 21 D0 00    	LD HL, new_dat
0186   0119 CD 1D 00    	CALL puts
0187   011C             	;add func here
0188   011C             
0189   011C             ;---------------------------------------------------
0190   011C             
0191   011C             serial_program:
0192   011C 21 00 81    	LD HL,8100h	; set location to store program sent from serial terminal
0193   011F             secloop:
0194   011F CD 36 00    	CALL uin
0195   0122 CD 17 00    	CALL putc
0196   0125 FE 7F       	CP 7Fh		; Check for delete to know when to execute program in ram
0197   0127 CA 00 81    	JP Z,8100h	; If delete jump to ram location
0198   012A 77          	LD (HL),A	; used to store above hex into memory
0199   012B 23          	INC HL		; incriment hl for next byte
0200   012C C3 1F 01    	JP secloop	; loop until makehex finds 'del', then execute jump to 8100h
0201   012F             	
0202   012F 76          	HALT		; stop cpu in the event that the program misbehaves 
0203   0130             
0204   0130             	
0205   0130             
0206   0130             	;.ORG 00F0H
0207   0130             start:	
0208   0130 3E 01       	LD A, 1H
0209   0132             
0210   0132             loop:
0211   0132 CD 17 00    	CALL putc
0212   0135 47          	LD B, A
0213   0136 3E 99       	LD A, 99h
0214   0138 B8          	CP B
0215   0139 CA 30 01    	JP Z, start
0216   013C 78          	LD A, B
0217   013D 3C          	INC A
0218   013E C3 32 01    	JP loop
0219   0141             
0220   0141             	.ORG 8100H
0221   8100             
0222   8100             	;LD HL,8110H
0223   8100             	;LD DE,00F0H
0224   8100             	;LD BC,32
0225   8100             	;LDIR
0226   8100 C3 FF 00    	JP 00FFH
Number of errors = 0
