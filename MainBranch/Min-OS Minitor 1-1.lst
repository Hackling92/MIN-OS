0001   0000             ;MIN-OS-Serial -  VER 1.0A
0002   0000             ;
0003   0000             ;
0004   0000             ;Ram located at 8000h
0005   0000             ;Stack Pointer at 88FFh
0006   0000             ;Change as needed
0007   0000             ;If this code is used give credit to hackling92.  Nothing special just use my name. Thank You
0008   0000             
0009   0000             
0010   0000             
0011   0000             
0012   0000             	; start the program at memory region 1 for programing simplicity
0013   0000             	.ORG 0001h
0014   0001             
0015   0001             lf	EQU 0Ah		; declair Line Feed
0016   0001             
0017   0001 31 FF 88    	LD SP,88FFh	; set the stack pointer
0018   0004             
0019   0004             
0020   0004             inituart:
0021   0004 3E 80       	LD A,10000000b  ; set div latch enable 1
0022   0006 D3 03       	OUT (03h),A	; write lcr
0023   0008 3E 01       	LD A,01h	; set Divisor to 1 for 115200 baud
0024   000A D3 00       	OUT (00h),A	; dll 0x07 (#7)
0025   000C 3E 00       	LD A,00h
0026   000E D3 01       	OUT (01h),A	; dlm 0x00
0027   0010 3E 0B       	LD A,00001011b	; set dle to 0, break to 0, odd parity, 1 stop bit, 8 bytes
0028   0012 D3 03       	OUT (03h),A	; write new configured lcr
0029   0014 C3 89 00    	JP startloop	; program start
0030   0017             		
0031   0017             
0032   0017             ;-----------------------
0033   0017             putc:			;Put Charactor Loop
0034   0017 CD 2D 00    	CALL tx_ready
0035   001A D3 00       	OUT (00h), A
0036   001C C9          	RET
0037   001D             
0038   001D             puts:			;Put String Loop
0039   001D F5          	PUSH AF
0040   001E E5          	PUSH HL
0041   001F             puts_loop:
0042   001F 7E          	LD A, (HL)
0043   0020 FE 00       	CP 0
0044   0022 28 06       	JR Z, puts_end
0045   0024 CD 17 00    	CALL putc
0046   0027 23          	INC HL
0047   0028 18 F5       	JR puts_loop
0048   002A             puts_end:
0049   002A E1          	POP HL
0050   002B F1          	POP AF
0051   002C C9          	RET
0052   002D             ;-----------------------
0053   002D             
0054   002D             
0055   002D             tx_ready:		;Check For Charactor In UART
0056   002D F5          	PUSH AF
0057   002E             tx_ready_loop:
0058   002E DB 05       	IN A, (05h)
0059   0030 CB 6F       	BIT 5, A
0060   0032 28 FA       	JR Z, tx_ready_loop
0061   0034 F1          	POP AF
0062   0035 C9          	RET
0063   0036             
0064   0036             
0065   0036             ;-----------------------
0066   0036             
0067   0036             uin:			;Get Charactor
0068   0036 DB 05       	IN A, (05h)
0069   0038 CB 47       	BIT 0,A
0070   003A CA 36 00    	JP Z,uin
0071   003D DB 00       	IN A,(00h)
0072   003F FE 58       	CP 58h		;X
0073   0041 CA 92 00    	JP Z,command_loop_aborted
0074   0044 C9          	RET
0075   0045             
0076   0045             
0077   0045             ;-----------------------
0078   0045             
0079   0045             new_line:			;Print Line Feed
0080   0045 CD 2D 00    	CALL tx_ready
0081   0048 3E 0A       	LD A, lf
0082   004A D3 00       	OUT (00h), A
0083   004C C9          	RET
0084   004D             
0085   004D             
0086   004D             ;-----------------------
0087   004D             
0088   004D             make_hex:		; convert ascii from uart to hex
0089   004D 06 00       	LD B,0
0090   004F CD 57 00    	CALL h1
0091   0052 07          	RLCA
0092   0053 07          	RLCA
0093   0054 07          	RLCA
0094   0055 07          	RLCA
0095   0056 47          	LD B,A
0096   0057             h1:
0097   0057 CD 36 00    	CALL uin
0098   005A 4F          	LD C,A
0099   005B CD 17 00    	CALL putc
0100   005E E6 70       	AND 070h
0101   0060 FE 40       	CP 040h
0102   0062 DA 6D 00    	JP C,h2
0103   0065 79          	LD A,C
0104   0066 E6 0F       	AND 00Fh
0105   0068 C6 09       	ADD A,9
0106   006A C3 70 00    	JP h3
0107   006D             h2:
0108   006D 79          	LD A,C
0109   006E E6 0F       	AND 00Fh
0110   0070             h3:
0111   0070 B0          	OR B
0112   0071 C9          	RET
0113   0072             
0114   0072             
0115   0072             
0116   0072             Num2Hex:
0117   0072 7C          	LD A,H
0118   0073 CD 7C 00    	CALL Num1
0119   0076 57          	LD D,A
0120   0077 7C          	LD A,H
0121   0078 CD 80 00    	CALL Num2
0122   007B 5F          	LD E,A
0123   007C             
0124   007C             Num1:
0125   007C 1F          	RRA
0126   007D 1F          	RRA
0127   007E 1F          	RRA
0128   007F 1F          	RRA
0129   0080             Num2:
0130   0080 F6 F0       	OR 240
0131   0082 27          	DAA
0132   0083 C6 A0       	ADD A,160
0133   0085 CE 40       	ADC A,40h
0134   0087 4F          	LD C,A
0135   0088             	
0136   0088 C9          	RET
0137   0089             
0138   0089             ;-----------------------	
0139   0089             	
0140   0089             startloop:			; starting point for program	
0141   0089 21 9E 01    	LD HL, starttext	; Load Start Message Location
0142   008C CD 1D 00    	CALL puts		; print start message
0143   008F C3 98 00    	JP command_loop
0144   0092             
0145   0092             ;----------------------------------------------
0146   0092             command_loop_aborted:
0147   0092 21 B6 01    	LD HL, abort_msg
0148   0095 CD 1D 00    	CALL puts
0149   0098             command_loop:
0150   0098 CD 45 00    	CALL new_line
0151   009B 21 A5 01    	LD HL,command_msg
0152   009E CD 1D 00    	CALL puts
0153   00A1 CD 36 00    	CALL uin
0154   00A4 CD 17 00    	CALL putc
0155   00A7 FE 4A       	CP 4Ah
0156   00A9 CA B6 00    	JP Z,j_loop
0157   00AC FE 50       	CP 50h
0158   00AE CA C4 00    	JP Z,p_loop
0159   00B1 FE 52       	CP 52h
0160   00B3 CA DC 00    	JP Z,r_loop
0161   00B6             
0162   00B6             
0163   00B6             j_loop:
0164   00B6 CD 36 00    	CALL uin
0165   00B9 CD 17 00    	CALL putc
0166   00BC FE 4D       	CP 4Dh		;JM COMMAND
0167   00BE CA 00 81    	JP Z,8100h
0168   00C1 C3 98 00    	JP command_loop
0169   00C4             
0170   00C4             p_loop:
0171   00C4 CD 36 00    	CALL uin
0172   00C7 CD 17 00    	CALL putc
0173   00CA FE 45       	CP 45h		;PE COMMAND
0174   00CC CA EF 00    	JP Z,pe_com
0175   00CF FE 4F       	CP 4Fh		;PO COMMAND
0176   00D1 CA 16 01    	JP Z,po_com
0177   00D4 FE 2B       	CP 2Bh		;P+ COMMAND
0178   00D6 CA 3A 01    	JP Z,p_plus_com
0179   00D9 C3 98 00    	JP command_loop
0180   00DC             
0181   00DC             r_loop:
0182   00DC CD 36 00    	CALL uin
0183   00DF CD 17 00    	CALL putc
0184   00E2 FE 53       	CP 53h		;RS COMMAND
0185   00E4 CA 00 00    	JP Z,0000h
0186   00E7 FE 50       	CP 50h		;RP COMMAND "REMOTE PROGRAM"
0187   00E9 CA 5F 01    	JP Z,serial_program
0188   00EC C3 98 00    	JP command_loop
0189   00EF             
0190   00EF             
0191   00EF             ;---------------------------------------------------
0192   00EF             pe_com:			;Peek Command
0193   00EF CD 45 00    	CALL new_line
0194   00F2 21 94 01    	LD HL, address
0195   00F5 CD 1D 00    	CALL puts
0196   00F8 CD 4D 00    	CALL make_hex
0197   00FB 57          	LD D,A
0198   00FC CD 4D 00    	CALL make_hex
0199   00FF 5F          	LD E,A
0200   0100 CD 45 00    	CALL new_line
0201   0103 1A          	LD A,(DE)
0202   0104 67          	LD H,A
0203   0105 CD 72 00    	CALL Num2Hex
0204   0108 7A          	LD A,D
0205   0109 CD 17 00    	CALL putc
0206   010C 7B          	LD A,E
0207   010D CD 17 00    	CALL putc
0208   0110 CD 45 00    	CALL new_line
0209   0113 C3 98 00    	JP command_loop
0210   0116             
0211   0116             
0212   0116             po_com:			;Poke Command
0213   0116 CD 45 00    	CALL new_line
0214   0119 21 94 01    	LD HL, address
0215   011C CD 1D 00    	CALL puts
0216   011F CD 4D 00    	CALL make_hex
0217   0122 57          	LD D,A
0218   0123 CD 4D 00    	CALL make_hex
0219   0126 5F          	LD E,A
0220   0127 CD 45 00    	CALL new_line
0221   012A 21 AF 01    	LD HL,data_msg
0222   012D CD 1D 00    	CALL puts
0223   0130 CD 4D 00    	CALL make_hex
0224   0133 12          	LD (DE),A
0225   0134 CD 45 00    	CALL new_line
0226   0137 C3 98 00    	JP command_loop
0227   013A             
0228   013A             
0229   013A             p_plus_com:		;Poke Command With Auto Inc
0230   013A CD 45 00    	CALL new_line
0231   013D 21 73 01    	LD HL,start_add
0232   0140 CD 1D 00    	CALL puts
0233   0143 CD 4D 00    	CALL make_hex
0234   0146 57          	LD D,A
0235   0147 CD 4D 00    	CALL make_hex
0236   014A 5F          	LD E,A
0237   014B CD 45 00    	CALL new_line
0238   014E             p_plus_com_loop_1:
0239   014E 21 AF 01    	LD HL,data_msg
0240   0151 CD 1D 00    	CALL puts
0241   0154 CD 4D 00    	CALL make_hex
0242   0157 12          	LD (DE),A
0243   0158 CD 45 00    	CALL new_line
0244   015B 13          	INC DE
0245   015C C3 4E 01    	JP p_plus_com_loop_1
0246   015F             
0247   015F             ;---------------------------------------------------
0248   015F             
0249   015F             serial_program:
0250   015F 21 00 81    	LD HL,8100h	; set location to store program sent from serial terminal
0251   0162             secloop:
0252   0162 CD 36 00    	CALL uin
0253   0165 CD 17 00    	CALL putc
0254   0168 FE 7F       	CP 7Fh		; Check for delete to know when to execute program in ram
0255   016A CA 00 81    	JP Z,8100h	; If delete jump to ram location
0256   016D 77          	LD (HL),A	; used to store above hex into memory
0257   016E 23          	INC HL		; incriment hl for next byte
0258   016F C3 62 01    	JP secloop	; loop until makehex finds 'del', then execute jump to 8100h
0259   0172             	
0260   0172 76          	HALT		; stop cpu in the event that the program misbehaves 
0261   0173             
0262   0173             	
0263   0173             
0264   0173             
0265   0173             
0266   0173             ;Strings
0267   0173             ;--------------------------------------------------
0268   0173             start_add:		; PE/PO Start Address
0269   0173 53 74 61 72 	DEFB "Start Add: ",0
0269   0177 74 20 41 64 
0269   017B 64 3A 20 00 
0270   017F             end_add:		; PE End Address
0271   017F 45 6E 64 20 	DEFB "End Add: ",0
0271   0183 41 64 64 3A 
0271   0187 20 00       
0272   0189             new_dat:		; New Data For PO Command
0273   0189 4E 65 77 20 	DEFB "New Data: ",0
0273   018D 44 61 74 61 
0273   0191 3A 20 00    
0274   0194             address:		; Address Text
0275   0194 41 64 64 72 	DEFB "Address: ",0
0275   0198 65 73 73 3A 
0275   019C 20 00       
0276   019E             starttext:		; start message
0277   019E 52 65 61 64 	DEFB "Ready", lf,0
0277   01A2 79 0A 00    
0278   01A5             command_msg:		; Enter Command message
0279   01A5 43 6F 6D 6D 	DEFB "Command: ",0
0279   01A9 61 6E 64 3A 
0279   01AD 20 00       
0280   01AF             data_msg:		; Data Message
0281   01AF 44 61 74 61 	DEFB "Data: ",0
0281   01B3 3A 20 00    
0282   01B6             abort_msg:		; Abort Message
0283   01B6 41 62 6F 72 	DEFB "Aborted", lf, lf,0
0283   01BA 74 65 64 0A 
0283   01BE 0A 00       
0284   01C0             ;--------------------------------------------------
0285   01C0             	
0286   01C0             
0287   01C0             
0288   01C0             	.ORG 8100h
0289   8100 3E 02       	LD A,2
0290   8102 C6 02       	ADD A,2
0291   8104 32 00 82    	LD (8200h),A
0292   8107 C3 98 00    	JP command_loop
Number of errors = 0
