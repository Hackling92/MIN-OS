0001   0000             ;MIN-OS-Serial -  VER 1.0A
0002   0000             ;
0003   0000             ;
0004   0000             ;Ram located at 8000h
0005   0000             ;Stack Pointer at 88FFh
0006   0000             ;Change as needed
0007   0000             ;If this code is used give credit to hackling92.  Nothing special just use my name. Thank You
0008   0000             
0009   0000             
0010   0000             
0011   0000             
0012   0000             	; start the program at memory region 1 for programing simplicity
0013   0000             	.ORG 0001h
0014   0001             
0015   0001             lf	EQU 0Ah		; declair Line Feed
0016   0001             
0017   0001 31 FF 88    	LD SP,88FFh	; set the stack pointer
0018   0004             
0019   0004             
0020   0004             inituart:
0021   0004 3E 80       	LD A,10000000b  ; set div latch enable 1
0022   0006 D3 03       	OUT (03h),A	; write lcr
0023   0008 3E 01       	LD A,01h	; set Divisor to 1 for 115200 baud
0024   000A D3 00       	OUT (00h),A	; dll 0x07 (#7)
0025   000C 3E 00       	LD A,00h
0026   000E D3 01       	OUT (01h),A	; dlm 0x00
0027   0010 3E 0B       	LD A,00001011b	; set dle to 0, break to 0, odd parity, 1 stop bit, 8 bytes
0028   0012 D3 03       	OUT (03h),A	; write new configured lcr
0029   0014 C3 E0 00    	JP startloop	; program start
0030   0017             		
0031   0017             
0032   0017             ;-----------------------
0033   0017             putc:			;Put Charactor Loop
0034   0017 CD 2D 00    	CALL tx_ready
0035   001A D3 00       	OUT (00h), A
0036   001C C9          	RET
0037   001D             
0038   001D             puts:			;Put String Loop
0039   001D F5          	PUSH AF
0040   001E E5          	PUSH HL
0041   001F             puts_loop:
0042   001F 7E          	LD A, (HL)
0043   0020 FE 00       	CP 0
0044   0022 28 06       	JR Z, puts_end
0045   0024 CD 17 00    	CALL putc
0046   0027 23          	INC HL
0047   0028 18 F5       	JR puts_loop
0048   002A             puts_end:
0049   002A E1          	POP HL
0050   002B F1          	POP AF
0051   002C C9          	RET
0052   002D             ;-----------------------
0053   002D             
0054   002D             
0055   002D             tx_ready:		;Check For Charactor In UART
0056   002D F5          	PUSH AF
0057   002E             tx_ready_loop:
0058   002E DB 05       	IN A, (05h)
0059   0030 CB 6F       	BIT 5, A
0060   0032 28 FA       	JR Z, tx_ready_loop
0061   0034 F1          	POP AF
0062   0035 C9          	RET
0063   0036             
0064   0036             
0065   0036             ;-----------------------
0066   0036             
0067   0036             uin:			;Get Charactor
0068   0036 DB 05       	IN A, (05h)
0069   0038 CB 47       	BIT 0,A
0070   003A CA 36 00    	JP Z,uin
0071   003D DB 00       	IN A,(00h)
0072   003F CD 8C 00    	CALL make_uppercase
0073   0042 FE 58       	CP 58h		;X
0074   0044 CA E9 00    	JP Z,command_loop_aborted
0075   0047 C9          	RET
0076   0048             
0077   0048             
0078   0048             ;-----------------------
0079   0048             
0080   0048             new_line:			;Print Line Feed
0081   0048 CD 2D 00    	CALL tx_ready
0082   004B 3E 0A       	LD A, lf
0083   004D D3 00       	OUT (00h), A
0084   004F C9          	RET
0085   0050             
0086   0050             
0087   0050             ;-----------------------
0088   0050             
0089   0050             make_hex:		; convert ascii from uart to hex
0090   0050 06 00       	LD B,0
0091   0052 CD 5A 00    	CALL h1
0092   0055 07          	RLCA
0093   0056 07          	RLCA
0094   0057 07          	RLCA
0095   0058 07          	RLCA
0096   0059 47          	LD B,A
0097   005A             h1:
0098   005A CD 36 00    	CALL uin
0099   005D 4F          	LD C,A
0100   005E CD 17 00    	CALL putc
0101   0061 E6 70       	AND 070h
0102   0063 FE 40       	CP 040h
0103   0065 DA 70 00    	JP C,h2
0104   0068 79          	LD A,C
0105   0069 E6 0F       	AND 00Fh
0106   006B C6 09       	ADD A,9
0107   006D C3 73 00    	JP h3
0108   0070             h2:
0109   0070 79          	LD A,C
0110   0071 E6 0F       	AND 00Fh
0111   0073             h3:
0112   0073 B0          	OR B
0113   0074 C9          	RET
0114   0075             
0115   0075             
0116   0075             
0117   0075             Num2Hex:
0118   0075 7C          	LD A,H
0119   0076 CD 7F 00    	CALL Num1
0120   0079 57          	LD D,A
0121   007A 7C          	LD A,H
0122   007B CD 83 00    	CALL Num2
0123   007E 5F          	LD E,A
0124   007F             
0125   007F             Num1:
0126   007F 1F          	RRA
0127   0080 1F          	RRA
0128   0081 1F          	RRA
0129   0082 1F          	RRA
0130   0083             Num2:
0131   0083 F6 F0       	OR 240
0132   0085 27          	DAA
0133   0086 C6 A0       	ADD A,160
0134   0088 CE 40       	ADC A,40h
0135   008A 4F          	LD C,A
0136   008B             	
0137   008B C9          	RET
0138   008C             
0139   008C             
0140   008C             ;-----------------------
0141   008C             
0142   008C             make_uppercase:			;Makes lowercase Hex uppercase Hex
0143   008C             
0144   008C FE 60       	CP 60h
0145   008E DA 98 00    	JP c,make_uppercase_end	;This in conjuntion with the line below check to see of A was less then 60h
0146   0091 CA 98 00    	JP z,make_uppercase_end
0147   0094             
0148   0094 06 20       	LD B,20h		;Subtract 20h to convert lowercase to uppercase
0149   0096 90          	SUB B
0150   0097 C9          	RET
0151   0098             make_uppercase_end:
0152   0098 C9          	RET
0153   0099             
0154   0099             ;-----------------------
0155   0099             
0156   0099             get_string:
0157   0099 21 00 80    	LD HL,8000h
0158   009C             get_string_2:
0159   009C CD 36 00    	CALL uin
0160   009F FE 0D       	CP 0Dh			;ENTER
0161   00A1 CA B1 00    	JP Z,get_string_1
0162   00A4 FE 08       	CP 08h			;BACKSPACE
0163   00A6 CA B4 00    	JP Z,get_string_3
0164   00A9 CD 17 00    	CALL putc
0165   00AC 77          	LD (HL),A
0166   00AD 23          	INC HL
0167   00AE C3 9C 00    	JP get_string_2
0168   00B1             get_string_1:
0169   00B1 36 00       	LD (HL),00h
0170   00B3 C9          	RET
0171   00B4             get_string_3:
0172   00B4 54          	LD D,H
0173   00B5 5D          	LD E,L
0174   00B6 1B          	DEC DE
0175   00B7 1A          	LD A,(DE)
0176   00B8 FE 00       	CP 0h
0177   00BA CA 9C 00    	JP Z,get_string_2
0178   00BD 2B          	DEC HL
0179   00BE 3E 08       	LD A,08h
0180   00C0 CD 17 00    	CALL putc
0181   00C3 C3 9C 00    	JP get_string_2
0182   00C6             
0183   00C6             ;-----------------------
0184   00C6             
0185   00C6             string_cmp:
0186   00C6 11 00 80    	LD DE,8000h
0187   00C9             string_cmp_2:
0188   00C9 1A          	LD A,(DE)
0189   00CA BE          	CP (HL)
0190   00CB CA D1 00    	JP Z,string_cmp_1
0191   00CE C3 DC 00    	JP string_cmp_fail
0192   00D1             string_cmp_1:
0193   00D1 7E          	LD A,(HL)
0194   00D2 FE 00       	CP 0h
0195   00D4 CA DE 00    	JP Z,string_cmp_pass
0196   00D7 23          	INC HL
0197   00D8 13          	INC DE
0198   00D9 C3 C9 00    	JP string_cmp_2
0199   00DC             string_cmp_fail:
0200   00DC B7          	OR A
0201   00DD C9          	RET
0202   00DE             string_cmp_pass:
0203   00DE 37          	SCF
0204   00DF C9          	RET
0205   00E0             
0206   00E0             ;-----------------------
0207   00E0             	
0208   00E0             startloop:			; starting point for program	
0209   00E0 21 FB 01    	LD HL, starttext	; Load Start Message Location
0210   00E3 CD 1D 00    	CALL puts		; print start message
0211   00E6 C3 EF 00    	JP command_loop
0212   00E9             
0213   00E9             ;----------------------------------------------
0214   00E9             command_loop_aborted:
0215   00E9 21 13 02    	LD HL, abort_msg
0216   00EC CD 1D 00    	CALL puts
0217   00EF             command_loop:
0218   00EF CD 48 00    	CALL new_line
0219   00F2 21 02 02    	LD HL,command_msg
0220   00F5 CD 1D 00    	CALL puts
0221   00F8 CD 99 00    	CALL get_string
0222   00FB             
0223   00FB 21 29 02    	LD HL,peek_command	;PEEK COMMAND
0224   00FE CD C6 00    	CALL string_cmp
0225   0101 DA 4C 01    	JP C,pe_com
0226   0104             
0227   0104 21 2E 02    	LD HL,poke_command	;POKE COMMAND
0228   0107 CD C6 00    	CALL string_cmp
0229   010A DA 73 01    	JP C,po_com
0230   010D             
0231   010D 21 33 02    	LD HL,poke+_command	;POKE+ COMMAND
0232   0110 CD C6 00    	CALL string_cmp
0233   0113 DA 97 01    	JP C,p_plus_com
0234   0116             
0235   0116 21 39 02    	LD HL,reset_command	;RESET COMMAND
0236   0119 CD C6 00    	CALL string_cmp
0237   011C DA 40 01    	JP C,rs_com
0238   011F             
0239   011F 21 3F 02    	LD HL,jump_command	;JUMP COMMAND
0240   0122 CD C6 00    	CALL string_cmp
0241   0125 DA 3A 01    	JP C,jm_com
0242   0128             
0243   0128 21 44 02    	LD HL,program_command	;PROGRAM COMMAND
0244   012B CD C6 00    	CALL string_cmp
0245   012E DA 46 01    	JP C,rp_com
0246   0131             
0247   0131 21 1C 02    	LD HL,invalid_msg
0248   0134 CD 1D 00    	CALL puts
0249   0137 C3 EF 00    	JP command_loop
0250   013A             
0251   013A             
0252   013A             
0253   013A             jm_com:
0254   013A CA 01 81    	JP Z,8101h
0255   013D C3 EF 00    	JP command_loop
0256   0140             
0257   0140             
0258   0140             
0259   0140             rs_com:
0260   0140 CA 00 00    	JP Z,0000h
0261   0143 CD EF 00    	CALL command_loop
0262   0146             
0263   0146             rp_com:
0264   0146 CA BC 01    	JP Z,serial_program
0265   0149 C3 EF 00    	JP command_loop
0266   014C             
0267   014C             
0268   014C             ;---------------------------------------------------
0269   014C             pe_com:			;Peek Command
0270   014C CD 48 00    	CALL new_line
0271   014F 21 F1 01    	LD HL, address
0272   0152 CD 1D 00    	CALL puts
0273   0155 CD 50 00    	CALL make_hex
0274   0158 57          	LD D,A
0275   0159 CD 50 00    	CALL make_hex
0276   015C 5F          	LD E,A
0277   015D CD 48 00    	CALL new_line
0278   0160 1A          	LD A,(DE)
0279   0161 67          	LD H,A
0280   0162 CD 75 00    	CALL Num2Hex
0281   0165 7A          	LD A,D
0282   0166 CD 17 00    	CALL putc
0283   0169 7B          	LD A,E
0284   016A CD 17 00    	CALL putc
0285   016D CD 48 00    	CALL new_line
0286   0170 C3 EF 00    	JP command_loop
0287   0173             
0288   0173             
0289   0173             po_com:			;Poke Command
0290   0173 CD 48 00    	CALL new_line
0291   0176 21 F1 01    	LD HL, address
0292   0179 CD 1D 00    	CALL puts
0293   017C CD 50 00    	CALL make_hex
0294   017F 57          	LD D,A
0295   0180 CD 50 00    	CALL make_hex
0296   0183 5F          	LD E,A
0297   0184 CD 48 00    	CALL new_line
0298   0187 21 0C 02    	LD HL,data_msg
0299   018A CD 1D 00    	CALL puts
0300   018D CD 50 00    	CALL make_hex
0301   0190 12          	LD (DE),A
0302   0191 CD 48 00    	CALL new_line
0303   0194 C3 EF 00    	JP command_loop
0304   0197             
0305   0197             
0306   0197             p_plus_com:		;Poke Command With Auto Inc
0307   0197 CD 48 00    	CALL new_line
0308   019A 21 D0 01    	LD HL,start_add
0309   019D CD 1D 00    	CALL puts
0310   01A0 CD 50 00    	CALL make_hex
0311   01A3 57          	LD D,A
0312   01A4 CD 50 00    	CALL make_hex
0313   01A7 5F          	LD E,A
0314   01A8 CD 48 00    	CALL new_line
0315   01AB             p_plus_com_loop_1:
0316   01AB 21 0C 02    	LD HL,data_msg
0317   01AE CD 1D 00    	CALL puts
0318   01B1 CD 50 00    	CALL make_hex
0319   01B4 12          	LD (DE),A
0320   01B5 CD 48 00    	CALL new_line
0321   01B8 13          	INC DE
0322   01B9 C3 AB 01    	JP p_plus_com_loop_1
0323   01BC             
0324   01BC             ;---------------------------------------------------
0325   01BC             
0326   01BC             serial_program:
0327   01BC 21 00 81    	LD HL,8100h	; set location to store program sent from serial terminal
0328   01BF             secloop:
0329   01BF CD 36 00    	CALL uin
0330   01C2 CD 17 00    	CALL putc
0331   01C5 FE 7F       	CP 7Fh		; Check for delete to know when to execute program in ram
0332   01C7 CA 00 81    	JP Z,8100h	; If delete jump to ram location
0333   01CA 77          	LD (HL),A	; used to store above hex into memory
0334   01CB 23          	INC HL		; incriment hl for next byte
0335   01CC C3 BF 01    	JP secloop	; loop until makehex finds 'del', then execute jump to 8100h
0336   01CF             	
0337   01CF 76          	HALT		; stop cpu in the event that the program misbehaves 
0338   01D0             
0339   01D0             	
0340   01D0             
0341   01D0             
0342   01D0             
0343   01D0             ;Strings
0344   01D0             ;--------------------------------------------------
0345   01D0             start_add:		; PE/PO Start Address
0346   01D0 53 74 61 72 	DEFB "Start Add: ",0
0346   01D4 74 20 41 64 
0346   01D8 64 3A 20 00 
0347   01DC             end_add:		; PE End Address
0348   01DC 45 6E 64 20 	DEFB "End Add: ",0
0348   01E0 41 64 64 3A 
0348   01E4 20 00       
0349   01E6             new_dat:		; New Data For PO Command
0350   01E6 4E 65 77 20 	DEFB "New Data: ",0
0350   01EA 44 61 74 61 
0350   01EE 3A 20 00    
0351   01F1             address:		; Address Text
0352   01F1 41 64 64 72 	DEFB "Address: ",0
0352   01F5 65 73 73 3A 
0352   01F9 20 00       
0353   01FB             starttext:		; start message
0354   01FB 52 45 41 44 	DEFB "READY", lf,0
0354   01FF 59 0A 00    
0355   0202             command_msg:		; Enter Command message
0356   0202 43 6F 6D 6D 	DEFB "Command: ",0
0356   0206 61 6E 64 3A 
0356   020A 20 00       
0357   020C             data_msg:		; Data Message
0358   020C 44 61 74 61 	DEFB "Data: ",0
0358   0210 3A 20 00    
0359   0213             abort_msg:		; Abort Message
0360   0213 41 62 6F 72 	DEFB "Aborted", lf,0
0360   0217 74 65 64 0A 
0360   021B 00          
0361   021C             invalid_msg:		; Abort Message
0362   021C 49 6E 76 61 	DEFB "Invalid Com", lf,0
0362   0220 6C 69 64 20 
0362   0224 43 6F 6D 0A 
0362   0228 00          
0363   0229             ;--------------------------------------------------
0364   0229             
0365   0229             
0366   0229             
0367   0229             ;Command Strings
0368   0229             ;--------------------------------------------------
0369   0229             
0370   0229             peek_command:
0371   0229 50 45 45 4B 	DEFB "PEEK",0
0371   022D 00          
0372   022E             poke_command:
0373   022E 50 4F 4B 45 	DEFB "POKE",0
0373   0232 00          
0374   0233             poke+_command:
0375   0233 50 4F 4B 45 	DEFB "POKE+",0
0375   0237 2B 00       
0376   0239             reset_command:
0377   0239 52 45 53 45 	DEFB "RESET",0
0377   023D 54 00       
0378   023F             jump_command:
0379   023F 4A 55 4D 50 	DEFB "JUMP",0
0379   0243 00          
0380   0244             program_command:
0381   0244 50 52 4F 47 	DEFB "PROGRAM",0
0381   0248 52 41 4D 00 
0382   024C             
0383   024C             ;--------------------------------------------------
0384   024C             	
0385   024C             
0386   024C             
0387   024C             	.ORG 8101h
0388   8101 CD 99 00    	CALL get_string
0389   8104 21 FB 01    	LD HL,starttext
0390   8107 CD C6 00    	CALL string_cmp
0391   810A C3 E0 00    	JP startloop
Number of errors = 0
